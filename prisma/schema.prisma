
generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(CUSTOMER)
  passwordHash  String?

  accounts Account[]
  sessions Session[]
  orders   Order[]
  bookings Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  CUSTOMER
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  pricePaise  Int
  imageUrl    String?
  isVeg       Boolean  @default(true)
  isAvailable Boolean  @default(true)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime?
  imageUrl    String?
  location    String?
  externalUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  phone     String
  email     String?
  partySize Int
  date      DateTime
  notes     String?
  eventId   String?
  createdAt DateTime @default(now())

  user  User?  @relation(fields: [userId], references: [id])
  event Event? @relation(fields: [eventId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String?
  status      OrderStatus @default(PENDING)
  totalPaise  Int
  createdAt   DateTime    @default(now())

  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int      @default(1)
  unitPaise  Int

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

model Media {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  type      MediaType @default(IMAGE)
  createdAt DateTime @default(now())
}

enum MediaType {
  IMAGE
  VIDEO
}