generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(CUSTOMER)
  passwordHash  String?
  phone         String?
  isActive      Boolean        @default(true)
  accounts      Account[]
  bookings      Booking[]
  orders        Order[]
  refreshTokens RefreshToken[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  imageUrl    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  pricePaise  Int
  imageUrl    String?
  isVeg       Boolean     @default(true)
  isAvailable Boolean     @default(true)
  isActive    Boolean     @default(true)
  calories    Int?
  prepTime    Int?
  categoryId  String
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("menu_items")
}

model Event {
  id              String    @id @default(cuid())
  title           String
  description     String?
  startAt         DateTime
  endAt           DateTime?
  imageUrl        String?
  location        String?
  externalUrl     String?
  maxCapacity     Int?
  currentBookings Int       @default(0)
  pricePaise      Int?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]

  @@map("events")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String?
  name      String
  phone     String
  email     String?
  partySize Int
  date      DateTime
  notes     String?
  status    BookingStatus @default(PENDING)
  eventId   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  event     Event?        @relation(fields: [eventId], references: [id])
  user      User?         @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Order {
  id                  String        @id @default(cuid())
  orderNumber         String        @unique
  userId              String?
  customerName        String
  customerPhone       String
  customerEmail       String?
  tableNumber         String?
  orderType           OrderType
  status              OrderStatus   @default(PENDING)
  paymentStatus       PaymentStatus @default(PENDING)
  totalPaise          Int
  notes               String?
  specialInstructions String?
  estimatedPrepTime   Int?
  actualPrepTime      Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  completedAt         DateTime?
  items               OrderItem[]
  user                User?         @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int      @default(1)
  unitPaise  Int
  notes      String?
  createdAt  DateTime @default(now())
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Media {
  id         String    @id @default(cuid())
  url        String
  filename   String
  mimeType   String
  size       Int
  caption    String?
  type       MediaType @default(IMAGE)
  uploadedBy String?
  createdAt  DateTime  @default(now())

  @@map("media")
}

model SystemSettings {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String
  type        SettingType @default(STRING)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("system_settings")
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
