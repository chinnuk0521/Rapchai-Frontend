
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SystemSettings` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SystemSettings
 * 
 */
export type SystemSettingsModel = runtime.Types.Result.DefaultSelection<Prisma.$SystemSettingsPayload>

export type AggregateSystemSettings = {
  _count: SystemSettingsCountAggregateOutputType | null
  _min: SystemSettingsMinAggregateOutputType | null
  _max: SystemSettingsMaxAggregateOutputType | null
}

export type SystemSettingsMinAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  type: $Enums.SettingType | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SystemSettingsMaxAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  type: $Enums.SettingType | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SystemSettingsCountAggregateOutputType = {
  id: number
  key: number
  value: number
  type: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SystemSettingsMinAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SystemSettingsMaxAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SystemSettingsCountAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SystemSettingsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemSettings to aggregate.
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingsOrderByWithRelationInput | Prisma.SystemSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SystemSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SystemSettings
  **/
  _count?: true | SystemSettingsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SystemSettingsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SystemSettingsMaxAggregateInputType
}

export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
      [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSystemSettings[P]>
    : Prisma.GetScalarType<T[P], AggregateSystemSettings[P]>
}




export type SystemSettingsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SystemSettingsWhereInput
  orderBy?: Prisma.SystemSettingsOrderByWithAggregationInput | Prisma.SystemSettingsOrderByWithAggregationInput[]
  by: Prisma.SystemSettingsScalarFieldEnum[] | Prisma.SystemSettingsScalarFieldEnum
  having?: Prisma.SystemSettingsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SystemSettingsCountAggregateInputType | true
  _min?: SystemSettingsMinAggregateInputType
  _max?: SystemSettingsMaxAggregateInputType
}

export type SystemSettingsGroupByOutputType = {
  id: string
  key: string
  value: string
  type: $Enums.SettingType
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: SystemSettingsCountAggregateOutputType | null
  _min: SystemSettingsMinAggregateOutputType | null
  _max: SystemSettingsMaxAggregateOutputType | null
}

type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
      }
    >
  >



export type SystemSettingsWhereInput = {
  AND?: Prisma.SystemSettingsWhereInput | Prisma.SystemSettingsWhereInput[]
  OR?: Prisma.SystemSettingsWhereInput[]
  NOT?: Prisma.SystemSettingsWhereInput | Prisma.SystemSettingsWhereInput[]
  id?: Prisma.StringFilter<"SystemSettings"> | string
  key?: Prisma.StringFilter<"SystemSettings"> | string
  value?: Prisma.StringFilter<"SystemSettings"> | string
  type?: Prisma.EnumSettingTypeFilter<"SystemSettings"> | $Enums.SettingType
  description?: Prisma.StringNullableFilter<"SystemSettings"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SystemSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SystemSettings"> | Date | string
}

export type SystemSettingsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  key?: string
  AND?: Prisma.SystemSettingsWhereInput | Prisma.SystemSettingsWhereInput[]
  OR?: Prisma.SystemSettingsWhereInput[]
  NOT?: Prisma.SystemSettingsWhereInput | Prisma.SystemSettingsWhereInput[]
  value?: Prisma.StringFilter<"SystemSettings"> | string
  type?: Prisma.EnumSettingTypeFilter<"SystemSettings"> | $Enums.SettingType
  description?: Prisma.StringNullableFilter<"SystemSettings"> | string | null
  createdAt?: Prisma.DateTimeFilter<"SystemSettings"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SystemSettings"> | Date | string
}, "id" | "key">

export type SystemSettingsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SystemSettingsCountOrderByAggregateInput
  _max?: Prisma.SystemSettingsMaxOrderByAggregateInput
  _min?: Prisma.SystemSettingsMinOrderByAggregateInput
}

export type SystemSettingsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SystemSettingsScalarWhereWithAggregatesInput | Prisma.SystemSettingsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SystemSettingsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SystemSettingsScalarWhereWithAggregatesInput | Prisma.SystemSettingsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SystemSettings"> | string
  key?: Prisma.StringWithAggregatesFilter<"SystemSettings"> | string
  value?: Prisma.StringWithAggregatesFilter<"SystemSettings"> | string
  type?: Prisma.EnumSettingTypeWithAggregatesFilter<"SystemSettings"> | $Enums.SettingType
  description?: Prisma.StringNullableWithAggregatesFilter<"SystemSettings"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
}

export type SystemSettingsCreateInput = {
  id?: string
  key: string
  value: string
  type?: $Enums.SettingType
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SystemSettingsUncheckedCreateInput = {
  id?: string
  key: string
  value: string
  type?: $Enums.SettingType
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SystemSettingsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSettingTypeFieldUpdateOperationsInput | $Enums.SettingType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSettingTypeFieldUpdateOperationsInput | $Enums.SettingType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingsCreateManyInput = {
  id?: string
  key: string
  value: string
  type?: $Enums.SettingType
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SystemSettingsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSettingTypeFieldUpdateOperationsInput | $Enums.SettingType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumSettingTypeFieldUpdateOperationsInput | $Enums.SettingType
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SystemSettingsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SystemSettingsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EnumSettingTypeFieldUpdateOperationsInput = {
  set?: $Enums.SettingType
}



export type SystemSettingsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSettings"]>

export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSettings"]>

export type SystemSettingsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["systemSettings"]>

export type SystemSettingsSelectScalar = {
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SystemSettingsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "value" | "type" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSettings"]>

export type $SystemSettingsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SystemSettings"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    key: string
    value: string
    type: $Enums.SettingType
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["systemSettings"]>
  composites: {}
}

export type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload, S>

export type SystemSettingsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SystemSettingsCountAggregateInputType | true
  }

export interface SystemSettingsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
  /**
   * Find zero or one SystemSettings that matches the filter.
   * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
   * @example
   * // Get one SystemSettings
   * const systemSettings = await prisma.systemSettings.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SystemSettingsFindUniqueArgs>(args: Prisma.SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
   * @example
   * // Get one SystemSettings
   * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
   * @example
   * // Get one SystemSettings
   * const systemSettings = await prisma.systemSettings.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SystemSettingsFindFirstArgs>(args?: Prisma.SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SystemSettings that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
   * @example
   * // Get one SystemSettings
   * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SystemSettings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SystemSettings
   * const systemSettings = await prisma.systemSettings.findMany()
   * 
   * // Get first 10 SystemSettings
   * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SystemSettingsFindManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SystemSettings.
   * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
   * @example
   * // Create one SystemSettings
   * const SystemSettings = await prisma.systemSettings.create({
   *   data: {
   *     // ... data to create a SystemSettings
   *   }
   * })
   * 
   */
  create<T extends SystemSettingsCreateArgs>(args: Prisma.SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SystemSettings.
   * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
   * @example
   * // Create many SystemSettings
   * const systemSettings = await prisma.systemSettings.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SystemSettingsCreateManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SystemSettings and returns the data saved in the database.
   * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
   * @example
   * // Create many SystemSettings
   * const systemSettings = await prisma.systemSettings.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SystemSettings and only return the `id`
   * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SystemSettings.
   * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
   * @example
   * // Delete one SystemSettings
   * const SystemSettings = await prisma.systemSettings.delete({
   *   where: {
   *     // ... filter to delete one SystemSettings
   *   }
   * })
   * 
   */
  delete<T extends SystemSettingsDeleteArgs>(args: Prisma.SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SystemSettings.
   * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
   * @example
   * // Update one SystemSettings
   * const systemSettings = await prisma.systemSettings.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SystemSettingsUpdateArgs>(args: Prisma.SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SystemSettings.
   * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
   * @example
   * // Delete a few SystemSettings
   * const { count } = await prisma.systemSettings.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SystemSettings
   * const systemSettings = await prisma.systemSettings.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SystemSettingsUpdateManyArgs>(args: Prisma.SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SystemSettings and returns the data updated in the database.
   * @param {SystemSettingsUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
   * @example
   * // Update many SystemSettings
   * const systemSettings = await prisma.systemSettings.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SystemSettings and only return the `id`
   * const systemSettingsWithIdOnly = await prisma.systemSettings.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SystemSettingsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SystemSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SystemSettings.
   * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
   * @example
   * // Update or create a SystemSettings
   * const systemSettings = await prisma.systemSettings.upsert({
   *   create: {
   *     // ... data to create a SystemSettings
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SystemSettings we want to update
   *   }
   * })
   */
  upsert<T extends SystemSettingsUpsertArgs>(args: Prisma.SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma.Prisma__SystemSettingsClient<runtime.Types.Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
   * @example
   * // Count the number of SystemSettings
   * const count = await prisma.systemSettings.count({
   *   where: {
   *     // ... the filter for the SystemSettings we want to count
   *   }
   * })
  **/
  count<T extends SystemSettingsCountArgs>(
    args?: Prisma.Subset<T, SystemSettingsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SystemSettingsAggregateArgs>(args: Prisma.Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

  /**
   * Group by SystemSettings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SystemSettingsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SystemSettingsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
      : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SystemSettings model
 */
readonly fields: SystemSettingsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SystemSettings.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SystemSettings model
 */
export interface SystemSettingsFieldRefs {
  readonly id: Prisma.FieldRef<"SystemSettings", 'String'>
  readonly key: Prisma.FieldRef<"SystemSettings", 'String'>
  readonly value: Prisma.FieldRef<"SystemSettings", 'String'>
  readonly type: Prisma.FieldRef<"SystemSettings", 'SettingType'>
  readonly description: Prisma.FieldRef<"SystemSettings", 'String'>
  readonly createdAt: Prisma.FieldRef<"SystemSettings", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SystemSettings", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SystemSettings findUnique
 */
export type SystemSettingsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where: Prisma.SystemSettingsWhereUniqueInput
}

/**
 * SystemSettings findUniqueOrThrow
 */
export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where: Prisma.SystemSettingsWhereUniqueInput
}

/**
 * SystemSettings findFirst
 */
export type SystemSettingsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingsOrderByWithRelationInput | Prisma.SystemSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemSettings.
   */
  cursor?: Prisma.SystemSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemSettings.
   */
  distinct?: Prisma.SystemSettingsScalarFieldEnum | Prisma.SystemSettingsScalarFieldEnum[]
}

/**
 * SystemSettings findFirstOrThrow
 */
export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingsOrderByWithRelationInput | Prisma.SystemSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SystemSettings.
   */
  cursor?: Prisma.SystemSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SystemSettings.
   */
  distinct?: Prisma.SystemSettingsScalarFieldEnum | Prisma.SystemSettingsScalarFieldEnum[]
}

/**
 * SystemSettings findMany
 */
export type SystemSettingsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter, which SystemSettings to fetch.
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SystemSettings to fetch.
   */
  orderBy?: Prisma.SystemSettingsOrderByWithRelationInput | Prisma.SystemSettingsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SystemSettings.
   */
  cursor?: Prisma.SystemSettingsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SystemSettings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SystemSettings.
   */
  skip?: number
  distinct?: Prisma.SystemSettingsScalarFieldEnum | Prisma.SystemSettingsScalarFieldEnum[]
}

/**
 * SystemSettings create
 */
export type SystemSettingsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * The data needed to create a SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingsCreateInput, Prisma.SystemSettingsUncheckedCreateInput>
}

/**
 * SystemSettings createMany
 */
export type SystemSettingsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SystemSettings.
   */
  data: Prisma.SystemSettingsCreateManyInput | Prisma.SystemSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemSettings createManyAndReturn
 */
export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * The data used to create many SystemSettings.
   */
  data: Prisma.SystemSettingsCreateManyInput | Prisma.SystemSettingsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SystemSettings update
 */
export type SystemSettingsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * The data needed to update a SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingsUpdateInput, Prisma.SystemSettingsUncheckedUpdateInput>
  /**
   * Choose, which SystemSettings to update.
   */
  where: Prisma.SystemSettingsWhereUniqueInput
}

/**
 * SystemSettings updateMany
 */
export type SystemSettingsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingsUpdateManyMutationInput, Prisma.SystemSettingsUncheckedUpdateManyInput>
  /**
   * Filter which SystemSettings to update
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * Limit how many SystemSettings to update.
   */
  limit?: number
}

/**
 * SystemSettings updateManyAndReturn
 */
export type SystemSettingsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * The data used to update SystemSettings.
   */
  data: Prisma.XOR<Prisma.SystemSettingsUpdateManyMutationInput, Prisma.SystemSettingsUncheckedUpdateManyInput>
  /**
   * Filter which SystemSettings to update
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * Limit how many SystemSettings to update.
   */
  limit?: number
}

/**
 * SystemSettings upsert
 */
export type SystemSettingsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * The filter to search for the SystemSettings to update in case it exists.
   */
  where: Prisma.SystemSettingsWhereUniqueInput
  /**
   * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
   */
  create: Prisma.XOR<Prisma.SystemSettingsCreateInput, Prisma.SystemSettingsUncheckedCreateInput>
  /**
   * In case the SystemSettings was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SystemSettingsUpdateInput, Prisma.SystemSettingsUncheckedUpdateInput>
}

/**
 * SystemSettings delete
 */
export type SystemSettingsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
  /**
   * Filter which SystemSettings to delete.
   */
  where: Prisma.SystemSettingsWhereUniqueInput
}

/**
 * SystemSettings deleteMany
 */
export type SystemSettingsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SystemSettings to delete
   */
  where?: Prisma.SystemSettingsWhereInput
  /**
   * Limit how many SystemSettings to delete.
   */
  limit?: number
}

/**
 * SystemSettings without action
 */
export type SystemSettingsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SystemSettings
   */
  select?: Prisma.SystemSettingsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SystemSettings
   */
  omit?: Prisma.SystemSettingsOmit<ExtArgs> | null
}
